#! /usr/bin/env python3
import os
import sys
from argparse import ArgumentParser, RawTextHelpFormatter


def __init__(parameters):
    parser = ArgumentParser(
        formatter_class = RawTextHelpFormatter,
        description = 'Parse AMBER metrics.',
        epilog = 'Liucongcong congcong_liu@icloud.com.'
    )
    parser.add_argument(
        '-i', '--amber_output', type = str, required = True, metavar = 'Amber output',
        help = 'The output directory generated by AMBER.'
    )
    parser.add_argument(
        '-s', '--sample_id', type = str, required = True, metavar = 'Sample ID'
    )
    return parser.parse_args(parameters)


def read_metrics_file(input_metrics, sample_id):
    '''sample_id	Bin ID	Most abundant genome	Purity (bp)	Completeness (bp)	Bin size (bp)'''
    genome_id2score = dict()
    open_file = open(input_metrics, 'r')
    yield open_file.readline().rstrip('\n')
    for line in open_file:
        lines = line.rstrip('\n').split('\t', maxsplit = 1)
        yield sample_id + '\t' + lines[1]
    open_file.close()
    return None


if __name__ == '__main__':
    parameters = __init__(sys.argv[1 : ])
    genome_ids = list()
    programs = list()
    genome_id2scores = list()
    genome_path = os.path.join(parameters.amber_output, 'genome')
    if os.access(genome_path, os.R_OK):
        for entry in os.scandir(genome_path):
            if entry.is_dir() and entry.name.lower() != 'gold standard':
                metrics_file = os.path.join(entry.path, 'metrics_per_bin.tsv')
                if os.access(metrics_file, os.R_OK):
                    open_file = open(parameters.sample_id + '.' + entry.name + '.amber_metrics.tsv', 'w')
                    for line in read_metrics_file(metrics_file, parameters.sample_id):
                        open_file.write(line + '\n')
                    open_file.close()